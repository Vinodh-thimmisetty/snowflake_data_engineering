-- ENABLE AI 
use role accountadmin;
ALTER ACCOUNT SET CORTEX_ENABLED_CROSS_REGION = 'AWS_US';
SHOW PARAMETERS LIKE 'CORTEX_ENABLED_CROSS_REGION' IN ACCOUNT;

--  Direct Data Share: SAME CLOUD, SAME REGION, DIFFERENT ACCOUNT      
--  Cross Data Share:  SAME CLOUD, DIFFERENT REGION, DIFFERENT ACCOUNT 
--  Cross Data Share:  DIFFERENT CLOUD, DIFFERENT REGION, DIFFERENT ACCOUNT 

-- DIRECTED DATA SHARE is supported only in SAME REGION with diff. Accounts. REPLICATION is mandatory for CROSS REGION or CLOUD for data sharing.
-- READER ACCOUNT: SAME CLOUD, SAME REGION
-- https://ymc12857.us-east-1.snowflakecomputing.com

-- SAME REGION
-- https://rgrdyng-same_region_ue1.snowflakecomputing.com
-- https://iac62214.us-east-1.snowflakecomputing.com

-- CROSS REGION
-- https://rgrdyng-cross_region_ue2.snowflakecomputing.com
-- https://vq95322.us-east-2.aws.snowflakecomputing.com

-- CROSS CLOUD
-- https://rgrdyng-cross_cloud_asia.snowflakecomputing.com
-- https://sg36610.southeast-asia.azure.snowflakecomputing.com

CREATE OR REPLACE DATABASE PROVIDER_DB;

CREATE OR REPLACE SCHEMA READER_SCHEMA WITH MANAGED ACCESS;
CREATE OR REPLACE SCHEMA SAME_CLOUD_SAME_REGION WITH MANAGED ACCESS;
CREATE OR REPLACE SCHEMA SAME_CLOUD_CROSS_REGION WITH MANAGED ACCESS;
CREATE OR REPLACE SCHEMA CROSS_CLOUD WITH MANAGED ACCESS;

CREATE OR REPLACE SEQUENCE PROVIDER_DB.READER_SCHEMA.SEQ_ODD
    START = 1
    INCREMENT = 2
    COMMENT = 'Generates odd numbers starting from 1'
    ORDER;

CREATE OR REPLACE SEQUENCE PROVIDER_DB.READER_SCHEMA.SEQ_EVEN
    START = 2
    INCREMENT = 2
    COMMENT = 'Generates even numbers starting from 2'
    ORDER;

CREATE OR REPLACE TABLE PROVIDER_DB.READER_SCHEMA.STANDARD_TABLE (
    ID NUMBER(38,0) DEFAULT PROVIDER_DB.READER_SCHEMA.SEQ_ODD.NEXTVAL,
    TEXT_FIELD VARCHAR(100)
) 
COMMENT = 'Standard table with odd sequence numbers'
DATA_RETENTION_TIME_IN_DAYS = 1;

CREATE OR REPLACE TRANSIENT TABLE PROVIDER_DB.READER_SCHEMA.TRANSIENT_TABLE (
    ID NUMBER(38,0) DEFAULT PROVIDER_DB.READER_SCHEMA.SEQ_EVEN.NEXTVAL,
    TEXT_FIELD VARCHAR(100)
) 
COMMENT = 'Transient table with even sequence numbers'
DATA_RETENTION_TIME_IN_DAYS = 0; 



INSERT INTO PROVIDER_DB.READER_SCHEMA.STANDARD_TABLE(TEXT_FIELD) VALUES('a'), ('b'), ('c'), ('d'),('e');
INSERT INTO PROVIDER_DB.READER_SCHEMA.TRANSIENT_TABLE(TEXT_FIELD) VALUES('a'), ('b'), ('c'), ('d'),('e');

CREATE OR REPLACE VIEW PROVIDER_DB.READER_SCHEMA.STANDARD_VIEW AS 
SELECT * FROM PROVIDER_DB.READER_SCHEMA.STANDARD_TABLE 
UNION ALL 
SELECT * FROM PROVIDER_DB.READER_SCHEMA.TRANSIENT_TABLE;

CREATE OR REPLACE SECURE VIEW PROVIDER_DB.READER_SCHEMA.SECURE_VIEW AS 
SELECT * FROM PROVIDER_DB.READER_SCHEMA.STANDARD_TABLE 
UNION ALL 
SELECT * FROM PROVIDER_DB.READER_SCHEMA.TRANSIENT_TABLE;

CREATE OR REPLACE MATERIALIZED VIEW PROVIDER_DB.READER_SCHEMA.MATERIALIZED_VIEW AS 
SELECT * FROM PROVIDER_DB.READER_SCHEMA.STANDARD_TABLE;

CREATE OR REPLACE SECURE MATERIALIZED VIEW PROVIDER_DB.READER_SCHEMA.SECURE_MATERIALIZED_VIEW AS 
SELECT * FROM PROVIDER_DB.READER_SCHEMA.TRANSIENT_TABLE;

CREATE OR REPLACE FUNCTION PROVIDER_DB.READER_SCHEMA.SQUARE_NUMBER(NUM FLOAT)
RETURNS FLOAT
LANGUAGE SQL
AS
$$
    NUM * NUM
$$;

CREATE OR REPLACE SECURE FUNCTION PROVIDER_DB.READER_SCHEMA.CUBE_NUMBER(NUM FLOAT)
RETURNS FLOAT
LANGUAGE SQL
AS
$$
    NUM * NUM * NUM
$$;

CREATE OR REPLACE STAGE PROVIDER_DB.READER_SCHEMA.MY_TEMP_STAGE
  FILE_FORMAT = (TYPE = 'CSV' 
                FIELD_DELIMITER = ',' 
                SKIP_HEADER = 1 
                FIELD_OPTIONALLY_ENCLOSED_BY = '"'
                NULL_IF = ('NULL', 'null')
                EMPTY_FIELD_AS_NULL = TRUE
                COMPRESSION = AUTO)
  COPY_OPTIONS = (ON_ERROR = 'CONTINUE'
                 FORCE = TRUE
                 SIZE_LIMIT = 100000000)
  ENCRYPTION = (TYPE = 'SNOWFLAKE_SSE')
  COMMENT = 'Temporary stage for CSV files';

CREATE OR REPLACE FILE FORMAT PROVIDER_DB.READER_SCHEMA.MY_CSV_FORMAT
  TYPE = CSV
  FIELD_DELIMITER = ','
  SKIP_HEADER = 1
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  NULL_IF = ('NULL', 'null')
  EMPTY_FIELD_AS_NULL = TRUE
  COMPRESSION = AUTO;

CREATE OR REPLACE TASK PROVIDER_DB.READER_SCHEMA.DAILY_CREDIT_USAGE_REPORT
  WAREHOUSE = COMP
  SCHEDULE = 'USING CRON 0 0 * * * America/Los_Angeles'
AS
  CALL SYSTEM$SEND_EMAIL(
    'DAILY_CREDIT_USAGE_REPORT',
    CURRENT_ACCOUNT(),
    $$ 
    SELECT 'Daily Credit Usage Report - ' || CURRENT_DATE() AS SUBJECT,
    'Credit Usage for ' || CURRENT_DATE() || ':
    ' || STRING_AGG(WAREHOUSE_NAME || ': ' || ROUND(CREDITS_USED,2) || ' credits', '
    ')
    FROM TABLE(INFORMATION_SCHEMA.WAREHOUSE_METERING_HISTORY(
      DATE_TRUNC('DAY', CURRENT_TIMESTAMP())::DATE,
      DATEADD('DAY', 1, CURRENT_TIMESTAMP())::DATE
    ))
    $$
  );

CREATE OR REPLACE PROCEDURE PROVIDER_DB.READER_SCHEMA.CALCULATE_SQUARE(num FLOAT)
RETURNS FLOAT
LANGUAGE SQL
AS
$$
BEGIN
    RETURN num * num;
END;
$$;

-- CALL PROVIDER_DB.READER_SCHEMA.CALCULATE_SQUARE(10);

CREATE OR REPLACE PROCEDURE PROVIDER_DB.READER_SCHEMA.CALCULATE_CUBE(num FLOAT)
RETURNS FLOAT
LANGUAGE SQL
AS
$$
BEGIN
    RETURN num * num * num;
END;
$$;

CREATE OR REPLACE PROCEDURE PROVIDER_DB.READER_SCHEMA.PROCESS_NUMBERS(NUMS ARRAY)
RETURNS ARRAY
LANGUAGE JAVASCRIPT
AS
$$
  var result = [];
  for (var i = 0; i < NUMS.length; i++) {
    snowflake.log("info", "Processing number: " + NUMS[i]);
    var stmt = snowflake.createStatement({
      sqlText: "CALL PROVIDER_DB.READER_SCHEMA.CALCULATE_SQUARE(?)",
      binds: [NUMS[i]]
    });
    var res = stmt.execute();
    res.next();
    sp_response = res.getColumnValue(1);
    result.push(sp_response);
    /*
    var warehouse_stmt = snowflake.createStatement({
      sqlText: "SELECT QUERY_ID, WAREHOUSE_NAME FROM TABLE(INFORMATION_SCHEMA.QUERY_HISTORY_BY_SESSION()) WHERE QUERY_ID = (SELECT LAST_QUERY_ID())"
    });
    var wh_res = warehouse_stmt.execute();
    wh_res.next();
    var warehouse_used = wh_res.getColumnValue(1);
    
    snowflake.log("info", "Result for " + NUMS[i] + ": " + sp_response + " (Warehouse used: " + warehouse_used + ")");
    */
  }
  return result;
$$;

CALL PROVIDER_DB.READER_SCHEMA.PROCESS_NUMBERS(ARRAY_CONSTRUCT(1,2,3));
-- Returns: [1, 4, 9]


CREATE OR REPLACE PROCEDURE PROVIDER_DB.READER_SCHEMA.sp_process_child(input_text STRING)
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    RETURN UPPER(input_text);
END;
$$;


CREATE OR REPLACE PROCEDURE PROVIDER_DB.READER_SCHEMA.sp_async_run_all_customers() 
RETURNS VARCHAR 
LANGUAGE SQL
AS BEGIN 
ASYNC (CALL sp_process_child('Customer1')); 
ASYNC (CALL sp_process_child ('Customer2')); 
-- Ensures all procs finish before returning ---- 
AWAIT ALL; 
RETURN 'Done (Async)'; 
END;

-- call PROVIDER_DB.READER_SCHEMA.sp_async_run_all_customers();
-- call PROVIDER_DB.READER_SCHEMA.sp_process_child('Vinodh');