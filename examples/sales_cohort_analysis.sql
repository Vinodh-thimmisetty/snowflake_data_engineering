-- ENABLE AI 
use role accountadmin;
ALTER ACCOUNT SET CORTEX_ENABLED_CROSS_REGION = 'AWS_US';
SHOW PARAMETERS LIKE 'CORTEX_ENABLED_CROSS_REGION' IN ACCOUNT;


ALTER SESSION SET QUERY_TAG = 'revenue_analysis_grouping_sets';
ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 300;


CREATE OR REPLACE TRANSIENT TABLE DUMMY.TMP.REVENUE_ANALYSIS AS
WITH joined_orders AS (
    SELECT
        YEAR(O_ORDERDATE)::TINYINT AS SALES_YEAR,
        O_TOTALPRICE,
        L_PARTKEY,
        O_ORDERKEY,
        C_CUSTKEY,
        C_MKTSEGMENT AS MARKET_SEGMENT,
        N_NATIONKEY,
        N_NAME AS NATION_NAME,
        N_REGIONKEY,
        R_REGIONKEY,
        R_NAME AS REGION_NAME
    FROM
        snowflake_sample_data.tpch_sf10.orders
        INNER JOIN snowflake_sample_data.tpch_sf10.customer ON O_CUSTKEY = C_CUSTKEY
        INNER JOIN snowflake_sample_data.tpch_sf10.nation ON N_NATIONKEY = C_NATIONKEY
        INNER JOIN snowflake_sample_data.tpch_sf10.region ON N_REGIONKEY = R_REGIONKEY
        INNER JOIN snowflake_sample_data.tpch_sf10.lineitem ON L_ORDERKEY = O_ORDERKEY
    WHERE SALES_YEAR >= 1990 AND SALES_YEAR < 2000
)
SELECT /*+ USE_CACHED_RESULT(FALSE) */ 
    GROUPING_ID(REGION_NAME, NATION_NAME, MARKET_SEGMENT) AS GROUPS_ID,
    CASE GROUPS_ID
        WHEN 0 THEN 1
        WHEN 1 THEN 2
        WHEN 3 THEN 3
        WHEN 7 THEN 4
        ELSE 5
    END AS GROUP_RANK,
    CASE GROUPS_ID
        WHEN 0 THEN 'YEAR/REGION/NATION/SEGMENT'
        WHEN 1 THEN 'YEAR/REGION/NATION'
        WHEN 3 THEN 'YEAR/REGION'
        WHEN 7 THEN 'YEAR'
        ELSE 'UNKNOWN'
    END AS GROUP_KEY,
    SALES_YEAR,
    REGION_NAME,
    NATION_NAME,
    MARKET_SEGMENT,
    APPROX_COUNT_DISTINCT(L_PARTKEY) AS TOTAL_ITEMS,
    ROUND(SUM(O_TOTALPRICE) / 1000000) AS TOTAL_REVENUE_IN_MILLIONS
FROM joined_orders
GROUP BY
    GROUPING SETS (
        (SALES_YEAR, REGION_NAME, NATION_NAME, MARKET_SEGMENT),
        (SALES_YEAR, REGION_NAME, NATION_NAME),
        (SALES_YEAR, REGION_NAME),
        (SALES_YEAR)
    )
HAVING TOTAL_REVENUE_IN_MILLIONS > 0 
   AND TOTAL_ITEMS > 0
ORDER BY
    GROUP_RANK, SALES_YEAR, REGION_NAME, NATION_NAME, MARKET_SEGMENT;


CREATE OR REPLACE TRANSIENT TABLE DUMMY.TMP.CUSTOMER_ANALYSIS AS
WITH customer_base AS (
    SELECT
        -- Customer Demographics
        C_CUSTKEY,
        C_NAME AS CUSTOMER_NAME,
        C_ADDRESS AS CUSTOMER_ADDRESS,
        C_PHONE AS CUSTOMER_PHONE,
        C_ACCTBAL AS ACCOUNT_BALANCE,
        C_MKTSEGMENT AS MARKET_SEGMENT,
        C_COMMENT AS CUSTOMER_COMMENT,
        
        -- Geographic Information
        N_NATIONKEY,
        N_NAME AS NATION_NAME,
        N_COMMENT AS NATION_COMMENT,
        R_REGIONKEY,
        R_NAME AS REGION_NAME,
        R_COMMENT AS REGION_COMMENT,
        
        -- Order Information
        O_ORDERKEY,
        O_ORDERSTATUS AS ORDER_STATUS,
        O_TOTALPRICE AS ORDER_VALUE,
        O_ORDERDATE AS ORDER_DATE,
        YEAR(O_ORDERDATE) AS ORDER_YEAR,
        MONTH(O_ORDERDATE) AS ORDER_MONTH,
        QUARTER(O_ORDERDATE) AS ORDER_QUARTER,
        O_ORDERPRIORITY AS ORDER_PRIORITY,
        O_CLERK AS ORDER_CLERK,
        O_SHIPPRIORITY AS SHIP_PRIORITY,
        O_COMMENT AS ORDER_COMMENT,
        
        -- Line Item Details
        L_LINENUMBER AS LINE_NUMBER,
        L_PARTKEY,
        L_SUPPKEY,
        L_QUANTITY,
        L_EXTENDEDPRICE AS EXTENDED_PRICE,
        L_DISCOUNT,
        L_TAX,
        L_RETURNFLAG AS RETURN_FLAG,
        L_LINESTATUS AS LINE_STATUS,
        L_SHIPDATE AS SHIP_DATE,
        L_COMMITDATE AS COMMIT_DATE,
        L_RECEIPTDATE AS RECEIPT_DATE,
        L_SHIPINSTRUCT AS SHIPPING_INSTRUCTIONS,
        L_SHIPMODE AS SHIPPING_MODE,
        L_COMMENT AS LINE_COMMENT,
        
        -- Part Information
        P_NAME AS PART_NAME,
        P_MFGR AS MANUFACTURER,
        P_BRAND,
        P_TYPE AS PART_TYPE,
        P_SIZE AS PART_SIZE,
        P_CONTAINER,
        P_RETAILPRICE AS RETAIL_PRICE,
        P_COMMENT AS PART_COMMENT,
        
        -- Supplier Information
        S_NAME AS SUPPLIER_NAME,
        S_ADDRESS AS SUPPLIER_ADDRESS,
        S_PHONE AS SUPPLIER_PHONE,
        S_ACCTBAL AS SUPPLIER_ACCOUNT_BALANCE,
        S_COMMENT AS SUPPLIER_COMMENT
        
    FROM snowflake_sample_data.tpch_sf10.customer
    INNER JOIN snowflake_sample_data.tpch_sf10.nation ON C_NATIONKEY = N_NATIONKEY
    INNER JOIN snowflake_sample_data.tpch_sf10.region ON N_REGIONKEY = R_REGIONKEY
    INNER JOIN snowflake_sample_data.tpch_sf10.orders ON C_CUSTKEY = O_CUSTKEY
    INNER JOIN snowflake_sample_data.tpch_sf10.lineitem ON O_ORDERKEY = L_ORDERKEY
    INNER JOIN snowflake_sample_data.tpch_sf10.part ON L_PARTKEY = P_PARTKEY
    INNER JOIN snowflake_sample_data.tpch_sf10.supplier ON L_SUPPKEY = S_SUPPKEY
    WHERE ORDER_DATE >= '1990-01-01' AND ORDER_DATE < '2000-01-01'
),

customer_aggregated AS (
    SELECT
        -- Customer Identity & Demographics
        C_CUSTKEY,
        CUSTOMER_NAME,
        CUSTOMER_ADDRESS,
        CUSTOMER_PHONE,
        ACCOUNT_BALANCE,
        MARKET_SEGMENT,
        
        -- Geographic Hierarchy
        REGION_NAME,
        NATION_NAME,
        
        -- Time Dimensions
        ORDER_YEAR,
        ORDER_QUARTER,
        
        -- Customer Business Metrics
        COUNT(DISTINCT O_ORDERKEY) AS TOTAL_ORDERS,
        COUNT(DISTINCT L_PARTKEY) AS UNIQUE_PARTS_PURCHASED,
        COUNT(DISTINCT L_SUPPKEY) AS UNIQUE_SUPPLIERS,
        COUNT(DISTINCT P_BRAND) AS UNIQUE_BRANDS,
        COUNT(DISTINCT MANUFACTURER) AS UNIQUE_MANUFACTURERS,
        
        -- Financial Metrics
        ROUND(SUM(ORDER_VALUE) / 1000000, 2) AS TOTAL_ORDER_VALUE_MILLIONS,
        ROUND(SUM(EXTENDED_PRICE) / 1000000, 2) AS TOTAL_EXTENDED_PRICE_MILLIONS,
        ROUND(AVG(ORDER_VALUE), 2) AS AVG_ORDER_VALUE,
        ROUND(AVG(EXTENDED_PRICE), 2) AS AVG_LINE_ITEM_VALUE,
        ROUND(SUM(L_DISCOUNT * EXTENDED_PRICE) / 1000000, 2) AS TOTAL_DISCOUNT_MILLIONS,
        ROUND(SUM(L_TAX * EXTENDED_PRICE) / 1000000, 2) AS TOTAL_TAX_MILLIONS,
        
        -- Quantity Metrics
        SUM(L_QUANTITY) AS TOTAL_QUANTITY_ORDERED,
        AVG(L_QUANTITY) AS AVG_QUANTITY_PER_LINE,
        
        -- Order Behavior Analysis
        COUNT(DISTINCT CASE WHEN ORDER_PRIORITY = '1-URGENT' THEN O_ORDERKEY END) AS URGENT_ORDERS,
        COUNT(DISTINCT CASE WHEN ORDER_PRIORITY = '5-LOW' THEN O_ORDERKEY END) AS LOW_PRIORITY_ORDERS,
        COUNT(DISTINCT CASE WHEN ORDER_STATUS = 'F' THEN O_ORDERKEY END) AS COMPLETED_ORDERS,
        COUNT(DISTINCT CASE WHEN ORDER_STATUS = 'O' THEN O_ORDERKEY END) AS OPEN_ORDERS,
        
        -- Shipping Analysis
        COUNT(DISTINCT SHIPPING_MODE) AS UNIQUE_SHIPPING_MODES,
        COUNT(DISTINCT CASE WHEN RETURN_FLAG = 'R' THEN O_ORDERKEY END) AS ORDERS_WITH_RETURNS,
        
        -- Time-based Metrics
        MIN(ORDER_DATE) AS FIRST_ORDER_DATE,
        MAX(ORDER_DATE) AS LAST_ORDER_DATE,
        DATEDIFF('day', MIN(ORDER_DATE), MAX(ORDER_DATE)) AS CUSTOMER_LIFETIME_DAYS,
        COUNT(DISTINCT ORDER_MONTH) AS ACTIVE_MONTHS,
        
        -- Top Products/Suppliers
        MODE(P_BRAND) AS MOST_PURCHASED_BRAND,
        MODE(MANUFACTURER) AS MOST_USED_MANUFACTURER,
        MODE(SHIPPING_MODE) AS PREFERRED_SHIPPING_MODE
        
    FROM customer_base
    GROUP BY 
        ALL
)

SELECT 
    -- Customer Segmentation using GROUPING SETS
    GROUPING_ID(REGION_NAME, NATION_NAME, MARKET_SEGMENT) AS GROUPING_LEVEL,
    CASE GROUPING_ID(REGION_NAME, NATION_NAME, MARKET_SEGMENT)
        WHEN 0 THEN 'CUSTOMER_SEGMENT_DETAIL'     -- All dimensions
        WHEN 1 THEN 'NATION_REGION_SUMMARY'      -- Market segment rolled up
        WHEN 3 THEN 'REGION_SUMMARY'             -- Nation + segment rolled up
        WHEN 7 THEN 'GLOBAL_SUMMARY'             -- All geography rolled up
        ELSE 'OTHER'
    END AS ANALYSIS_LEVEL,
    
    -- Dimensions
    ORDER_YEAR,
    ORDER_QUARTER,
    REGION_NAME,
    NATION_NAME,
    MARKET_SEGMENT,
    
    -- Customer Counts
    COUNT(DISTINCT C_CUSTKEY) AS UNIQUE_CUSTOMERS,
    
    -- Aggregated Business Metrics
    SUM(TOTAL_ORDERS) AS TOTAL_ORDERS_ALL,
    SUM(UNIQUE_PARTS_PURCHASED) AS TOTAL_UNIQUE_PARTS,
    SUM(UNIQUE_SUPPLIERS) AS TOTAL_UNIQUE_SUPPLIERS,
    
    -- Financial Aggregations
    SUM(TOTAL_ORDER_VALUE_MILLIONS) AS TOTAL_REVENUE_MILLIONS,
    AVG(AVG_ORDER_VALUE) AS AVG_ORDER_VALUE_ACROSS_CUSTOMERS,
    SUM(TOTAL_DISCOUNT_MILLIONS) AS TOTAL_DISCOUNTS_MILLIONS,
    SUM(TOTAL_TAX_MILLIONS) AS TOTAL_TAX_MILLIONS,
    
    -- Customer Behavior
    AVG(CUSTOMER_LIFETIME_DAYS) AS AVG_CUSTOMER_LIFETIME_DAYS,
    AVG(ACTIVE_MONTHS) AS AVG_ACTIVE_MONTHS_PER_CUSTOMER,
    
    -- Account Balance Analysis
    AVG(ACCOUNT_BALANCE) AS AVG_ACCOUNT_BALANCE,
    
    -- Performance Ratios
    ROUND(SUM(TOTAL_ORDER_VALUE_MILLIONS) / NULLIF(COUNT(DISTINCT C_CUSTKEY), 0), 2) AS REVENUE_PER_CUSTOMER,
    ROUND(SUM(TOTAL_ORDERS) / NULLIF(COUNT(DISTINCT C_CUSTKEY), 0), 1) AS ORDERS_PER_CUSTOMER

FROM customer_aggregated
GROUP BY GROUPING SETS (
    (ORDER_YEAR, ORDER_QUARTER, REGION_NAME, NATION_NAME, MARKET_SEGMENT),  -- Most detailed
    (ORDER_YEAR, ORDER_QUARTER, REGION_NAME, NATION_NAME),                  -- By geography
    (ORDER_YEAR, ORDER_QUARTER, REGION_NAME),                               -- By region
    (ORDER_YEAR, ORDER_QUARTER)                                             -- Time only
)
HAVING UNIQUE_CUSTOMERS > 0
ORDER BY 
    GROUPING_LEVEL,
    ORDER_YEAR,
    ORDER_QUARTER,
    TOTAL_REVENUE_MILLIONS DESC NULLS LAST,
    REGION_NAME NULLS LAST,
    NATION_NAME NULLS LAST,
    MARKET_SEGMENT NULLS LAST;


SELECT * FROM DUMMY.TMP.CUSTOMER_ANALYSIS;