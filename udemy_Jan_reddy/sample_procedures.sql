CREATE DATABASE UDEMY;

CREATE SCHEMA UDEMY.BRONZE;

CREATE SCHEMA UDEMY.SILVER;

CREATE SCHEMA UDEMY.GOLD;

use schema udemy.bronze;

CREATE OR REPLACE TABLE UDEMY.BRONZE.DATA_LOAD_CONTROL (
    LOAD_ID NUMBER IDENTITY(1,1) NOORDER,
    SOURCE_STAGE_LOCATION VARCHAR(500),
    TARGET_DATABASE VARCHAR(100),
    TARGET_SCHEMA VARCHAR(100),
    TARGET_TABLE VARCHAR(100),
    FILE_TYPE VARCHAR(100),
    FILE_PATTERN VARCHAR(100),
    FIELD_DELIMITER VARCHAR(100),
    ON_ERROR STRING,
    SKIP_HEADER INT,
    FORCE_INSERT BOOLEAN,
    TRUNCATE_COLUMNS BOOLEAN,
    IS_ACTIVE BOOLEAN,
    PRIMARY KEY (TARGET_DATABASE, TARGET_SCHEMA, TARGET_TABLE)
)
COMMENT = 'Control table for tracking data loads and maintaining comprehensive data governance metadata';

INSERT INTO UDEMY.BRONZE.DATA_LOAD_CONTROL (
    SOURCE_STAGE_LOCATION,
    TARGET_DATABASE,
    TARGET_SCHEMA,
    TARGET_TABLE,
    FILE_TYPE,
    FILE_PATTERN,
    FIELD_DELIMITER,
    ON_ERROR,
    SKIP_HEADER,
    FORCE_INSERT,
    TRUNCATE_COLUMNS,
    IS_ACTIVE
) VALUES 
('@S3_INT/amazon/',
'UDEMY',
'BRONZE',
'EC2_INSTANCES',
'CSV',
'.*EC2.*\\.csv',
',',
'CONTINUE',
1,
TRUE,
FALSE,
TRUE);


CREATE OR REPLACE PROCEDURE UDEMY.BRONZE.SP_DATA_COPY()
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
AS
DECLARE
    FILES_CURSOR CURSOR FOR (SELECT * FROM IDENTIFIER(?) WHERE IS_ACTIVE);
    RESULT_COUNT INT DEFAULT 0;
    RESPONSE STRING DEFAULT 'NO DATA';
    
BEGIN
    OPEN FILES_CURSOR USING('UDEMY.BRONZE.DATA_LOAD_CONTROL');
    FOR C IN FILES_CURSOR DO
        LET FILE_FORMAT TEXT := '';
        LET FILE_TYPE TEXT := C.FILE_TYPE;
        LET SKIP_HEADER INT := C.SKIP_HEADER;
        LET FIELD_DELIMITER TEXT := C.FIELD_DELIMITER;
        IF(UPPER(:FILE_TYPE) = 'CSV') THEN
            FILE_FORMAT := '(TYPE='||:FILE_TYPE||' SKIP_HEADER='||:SKIP_HEADER||' FIELD_DELIMITER=\''||:FIELD_DELIMITER||'\' EMPTY_FIELD_AS_NULL=TRUE)';
        ELSE
            FILE_FORMAT := '(type=' ||:FILE_TYPE||')';
        END IF;

        list @UDEMY.BRONZE.S3_INT;

        SELECT COUNT(1) INTO :RESULT_COUNT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()));

        IF(:RESULT_COUNT > 0) THEN
            LET TARGET_DATABASE TEXT := C.TARGET_DATABASE;
            LET TARGET_SCHEMA TEXT := C.TARGET_SCHEMA;
            LET TARGET_TABLE TEXT := C.TARGET_TABLE;
            LET FILE_PATTERN TEXT := C.FILE_PATTERN;
            LET ON_ERROR TEXT := C.ON_ERROR;
            LET FORCE_INSERT BOOLEAN := C.FORCE_INSERT;
            LET TRUNCATE_COLUMNS BOOLEAN := C.TRUNCATE_COLUMNS;
            LET COPY_STATEMENT TEXT := 'COPY INTO '||:TARGET_DATABASE||'.'||:TARGET_SCHEMA||'.'||:TARGET_TABLE||' FROM @UDEMY.BRONZE.S3_INT PATTERN=\''|| :FILE_PATTERN || '\' ON_ERROR=' ||:ON_ERROR|| ' FORCE='||:FORCE_INSERT||'  TRUNCATECOLUMNS='||:TRUNCATE_COLUMNS;
            EXECUTE IMMEDIATE :COPY_STATEMENT;
            LET TARGET_OBJECT TEXT := CONCAT_WS('.', :TARGET_DATABASE, :TARGET_SCHEMA, :TARGET_TABLE);
            SELECT COUNT(1) INTO :RESULT_COUNT FROM IDENTIFIER(:TARGET_OBJECT);
            RESPONSE := 'Total Records Inserted: ' || :RESULT_COUNT;
        ELSE 
            RESPONSE := 'No NEW Records to Process';
        END IF;
    END FOR;
    CLOSE FILES_CURSOR;
    RETURN :RESPONSE;
END;



SELECT * FROM EC2_INSTANCES;

CREATE OR REPLACE TASK LOAD_FILE_AT_SCHEDULE
SCHEDULE = 'USING CRON 0 7 * * * UTC'
AS
CALL UDEMY.BRONZE.SP_DATA_COPY();

ALTER TASK LOAD_FILE_AT_SCHEDULE RESUME;
ALTER TASK LOAD_FILE_AT_SCHEDULE SUSPEND;



